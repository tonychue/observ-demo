
loki:
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1
  # storage:
  #   bucketNames:
  #     chunks: chunks
  #     ruler: ruler
  #     admin: admin
  #   type: s3
  #   s3:
  #     s3: null
  #     endpoint: null
  #     region: null
  #     secretAccessKey: null
  #     accessKeyId: null
  #     signatureVersion: null
  #     s3ForcePathStyle: false
  #     insecure: false
  #     http_config: {}
  #     # -- Check https://grafana.com/docs/loki/latest/configure/#s3_storage_config for more info on how to provide a backoff_config
  #     backoff_config: {}  
    storage:
      type: 'filesystem'
    limits_config:
      split_queries_by_interval: 24h
      max_query_parallelism: 100
    query_scheduler:
      max_outstanding_requests_per_tenant: 4096
    frontend:
      max_outstanding_per_tenant: 4096
  singleBinary:
    replicas: 1
  monitoring:
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
    # selfMonitoring:
    #   enabled: true
    #   # -- Tenant to use for self monitoring
    #   tenant:
    #     # -- Name of the tenant
    #     name: "self-monitoring"
    #     # -- Namespace to create additional tenant token secret in. Useful if your Grafana instance
    #     # is in a separate namespace. Token will still be created in the canary namespace.
    #     secretNamespace: "{{ .Release.Namespace }}"  
  test:
    enabled: false
grafana:
  adminUser: admin
  adminPassword: admin
  rbac:
  ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
    useExistingRole: argocd-grafana-access-role
    namespaced: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Loki
        type: loki
        url: http://observability-loki:3100
  # grafana.ini:
  #   server:
  #     http_port: 3000
  #     http_addr: 127.0.0.1
  #     domain: localhost

opentelemetry-collector:
  mode: daemonset
  presets:
    hostMetrics:
      enabled: true
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: true
    # Enable filelogreceiver collector
    logsCollection:
      enabled: true
      includeCollectorLogs: true
  tolerations:
    - key: "usage"
      operator: "Equal"
      value: "startup"
      effect: "NoSchedule"
  config:
    exporters:
      loki:
        endpoint: http://observability-loki:3100/loki/api/v1/push
        timeout: 10s # timeout
        read_buffer_size: 200
        write_buffer_size: 100
        retry_on_failure: # Configuration Retries
          enabled: true
          initial_interval: 10s # initial interval
          max_interval: 60s # Maximum interval
          max_elapsed_time: 10m # Maximum time
        default_labels_enabled:
          exporter: false
    processors:
      resource:
        attributes:
          - action: insert
            key: loki.resource.labels
            value: k8s.namespace.name,k8s.pod.name,k8s.container.name
    service:
      pipelines:
        logs:
          exporters:
            - loki
          processors:
            - memory_limiter
            - k8sattributes
            - resource
            - batch